@page "/processexcel"
@rendermode InteractiveServer

@inject ExcelProcessStatusService ProcessStatusService
@inject ProcessManagerService ProcessManager

<h3>Excel File Processor</h3>

<InputFile OnChange="OnFileSelected" />
<br />
<br />

<button @onclick="StartProcessing" disabled="@(!CanStart)">Start Process</button>
<button @onclick="StopProcessing" disabled="@(!isProcessing)">Stop</button>

@if (currentStatus != null)
{
    <p><strong>File:</strong> @currentStatus.FileName</p>
    <p><strong>Status:</strong> @currentStatus.Status</p>
    <p><strong>Progress:</strong> @currentStatus.Progress %</p>

    @if (!string.IsNullOrEmpty(currentStatus.ErrorMessage))
    {
        <p style="color:red"><strong>Error:</strong> @currentStatus.ErrorMessage</p>
    }
}

@code {
    private IBrowserFile? selectedFile;
    private byte[]? fileData;

    private bool isProcessing = false;
    private Guid currentProcessId;
    private CancellationTokenSource? cts;

    private ExcelProcessStatus? currentStatus;

    private bool CanStart => selectedFile != null && !isProcessing;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        using var stream = selectedFile.OpenReadStream(long.MaxValue);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        fileData = ms.ToArray();

        currentStatus = null;
        StateHasChanged();
    }

    private async Task StartProcessing()
    {
        if (isProcessing || fileData == null || selectedFile == null)
            return;

        isProcessing = true;
        cts = new CancellationTokenSource();

        currentProcessId = Guid.NewGuid();

        var status = new ExcelProcessStatus
        {
            ProcessId = currentProcessId,
            FileName = selectedFile.Name,
            Status = "Processing",
            Progress = 0,
            StartTime = DateTime.UtcNow
        };

        ProcessStatusService.AddProcess(status);
        currentStatus = status;

        // Register the new process with its cancellation token
        bool registered = ProcessManager.TryAddProcess(currentProcessId, cts);

        if (!registered)
        {
            // Handle rare case of duplicate processId or failure
            isProcessing = false;
            return;
        }

        // Run processing in background
        await Task.Run(() => ProcessExcelFile(currentProcessId, fileData, cts.Token));

        isProcessing = false;
        StateHasChanged();
    }

    private void StopProcessing()
    {
        if (isProcessing && cts != null)
        {
            cts.Cancel();
            ProcessStatusService.UpdateProcessStatus(currentProcessId, "Cancelled", currentStatus?.Progress ?? 0, endTime: DateTime.UtcNow);
        }
    }

    private void ProcessExcelFile(Guid processId, byte[] data, CancellationToken token)
    {
        int totalRows = 1000; // Simulated number of rows

        try
        {
            for (int i = 0; i < totalRows; i++)
            {
                token.ThrowIfCancellationRequested();

                // Simulate some work
                Thread.Sleep(50);

                if (i % 50 == 0)
                {
                    int progress = (int)((i / (double)totalRows) * 100);
                    ProcessStatusService.UpdateProcessStatus(processId, "Processing", progress);
                    InvokeAsync(() =>
                    {
                        currentStatus = ProcessStatusService.GetProcess(processId);
                        StateHasChanged();
                    }).Wait();
                }
            }

            ProcessStatusService.UpdateProcessStatus(processId, "Completed", 100, endTime: DateTime.UtcNow);
        }
        catch (OperationCanceledException)
        {
            ProcessStatusService.UpdateProcessStatus(processId, "Cancelled", currentStatus?.Progress ?? 0, endTime: DateTime.UtcNow);
        }
        catch (Exception ex)
        {
            ProcessStatusService.UpdateProcessStatus(processId, "Failed", currentStatus?.Progress ?? 0, ex.Message, DateTime.UtcNow);
        }
        finally
        {
            ProcessManager.RemoveProcess(processId);

            InvokeAsync(() =>
            {
                currentStatus = ProcessStatusService.GetProcess(processId);
                isProcessing = false;
                StateHasChanged();
            }).Wait();
        }
    }
}
