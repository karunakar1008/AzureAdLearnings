@page "/weatherforecast"

@attribute [Authorize]
@inject WeatherForecastService ForecastService
@using BlazorWasmAppAzureAdLogin.Models

@* @inject IHttpClientFactory ClientFactory *@
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private BlazorWasmAppAzureAdLogin.Models.WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
       // var http = ClientFactory.CreateClient("MyApiClient");
       //  forecasts = await http.GetFromJsonAsync<BlazorWasmAppAzureAdLogin.Models.WeatherForecast[]>("WeatherForecast");
        //forecasts = await Http.GetFromJsonAsync<BlazorWasmAppAzureAdLogin.Models.WeatherForecast[]?>("https://localhost:7168/WeatherForecast/");
         forecasts = await ForecastService.GetForecastsAsync();
        StateHasChanged();
    }
    
}
