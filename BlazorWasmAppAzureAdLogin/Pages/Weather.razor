@page "/weather"
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation

@attribute [Authorize]


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private BlazorWasmAppAzureAdLogin.Models.WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            forecasts = await Http.GetFromJsonAsync<BlazorWasmAppAzureAdLogin.Models.WeatherForecast[]>("https://localhost:7168/WeatherForecast");
        }
        else
        {
            // Handle no token
            // Token could not be acquired silently
            // Usually means the user needs to reauthenticate
            Navigation.NavigateTo("authentication/login");
        }
       // forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

}
