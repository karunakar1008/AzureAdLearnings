@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        @if (tokenInfoVisible)
        {
            <div class="toast-container">
                <div class="toast">
                    <strong>Token Info:</strong>
                    <div>Expires at: @tokenExpiry.ToLocalTime()</div>
                    <button class="close-btn" @onclick="HideToast">×</button>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private bool tokenInfoVisible = true;
    private DateTimeOffset tokenExpiry = DateTimeOffset.MinValue;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var expClaim = user.FindFirst("exp");
            if (expClaim != null && long.TryParse(expClaim.Value, out var expSeconds))
            {
                // exp claim is in Unix epoch seconds
                //tokenExpiry = DateTimeOffset.FromUnixTimeSeconds(expSeconds);
                tokenExpiry = DateTime.UtcNow.AddMinutes(6);
            }

            // Auto-hide after 10 seconds
            await Task.Delay(10000);
            tokenInfoVisible = false;
            StateHasChanged();
        }
    }

    private void HideToast()
    {
        tokenInfoVisible = false;
    }
}
