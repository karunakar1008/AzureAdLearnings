@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject HttpClient Http

@if (showExpiryModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Session Expiring Soon</h5>
                </div>
                <div class="modal-body">
                    <p>Your session will expire in less than 2 minutes.</p>
                    <p>Would you like to extend your session?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="ExtendSession">Yes, Extend</button>
                    <button class="btn btn-secondary" @onclick="Logout">Log Out</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private DateTime tokenExpiresUtc;
    private Timer _tokenMonitorTimer;
    private bool showExpiryModal = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await TokenProvider.RequestAccessToken();

        if (result.TryGetToken(out var token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token.Value);
            tokenExpiresUtc = jwt.ValidTo;

            StartTokenMonitor();
        }
        else
        {
            Navigation.NavigateTo("authentication/login");
        }
    }

    private void StartTokenMonitor()
    {
        _tokenMonitorTimer = new Timer(CheckTokenExpiry, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

    private void CheckTokenExpiry(object state)
    {
        var timeLeft = tokenExpiresUtc - DateTime.UtcNow;

        if (timeLeft < TimeSpan.FromMinutes(2) && !showExpiryModal)
        {
            showExpiryModal = true;
            InvokeAsync(StateHasChanged);
        }

        if (timeLeft <= TimeSpan.Zero)
        {
            _tokenMonitorTimer?.Dispose();
            Navigation.NavigateTo("authentication/login", forceLoad: true);
        }
    }

    private async Task ExtendSession()
    {
        try
        {
            // Trigger a dummy API call to silently refresh the token
            var result = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "api://<your-api-client-id>/access_as_user" }
            });

            if (result.TryGetToken(out var token))
            {
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwt = handler.ReadJwtToken(token.Value);
                tokenExpiresUtc = jwt.ValidTo;

                showExpiryModal = false;
            }
            else
            {
                Navigation.NavigateTo("authentication/login");
            }
        }
        catch
        {
            Navigation.NavigateTo("authentication/login");
        }
    }

    public void Dispose()
    {
        _tokenMonitorTimer?.Dispose();
    }

    private void Logout()
    {
        Navigation.NavigateTo("authentication/logout");
    }
}
